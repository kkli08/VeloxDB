// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: KeyValue.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeyValue_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_KeyValue_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_KeyValue_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_KeyValue_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_KeyValue_2eproto;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum KeyValue_KeyValueType : int {
  KeyValue_KeyValueType_INT = 0,
  KeyValue_KeyValueType_LONG = 1,
  KeyValue_KeyValueType_DOUBLE = 2,
  KeyValue_KeyValueType_CHAR = 3,
  KeyValue_KeyValueType_STRING = 4,
  KeyValue_KeyValueType_KeyValue_KeyValueType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  KeyValue_KeyValueType_KeyValue_KeyValueType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool KeyValue_KeyValueType_IsValid(int value);
extern const uint32_t KeyValue_KeyValueType_internal_data_[];
constexpr KeyValue_KeyValueType KeyValue_KeyValueType_KeyValueType_MIN = static_cast<KeyValue_KeyValueType>(0);
constexpr KeyValue_KeyValueType KeyValue_KeyValueType_KeyValueType_MAX = static_cast<KeyValue_KeyValueType>(4);
constexpr int KeyValue_KeyValueType_KeyValueType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
KeyValue_KeyValueType_descriptor();
template <typename T>
const std::string& KeyValue_KeyValueType_Name(T value) {
  static_assert(std::is_same<T, KeyValue_KeyValueType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to KeyValueType_Name().");
  return KeyValue_KeyValueType_Name(static_cast<KeyValue_KeyValueType>(value));
}
template <>
inline const std::string& KeyValue_KeyValueType_Name(KeyValue_KeyValueType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<KeyValue_KeyValueType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool KeyValue_KeyValueType_Parse(absl::string_view name, KeyValue_KeyValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeyValue_KeyValueType>(
      KeyValue_KeyValueType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class KeyValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeyValue(const KeyValue& from) : KeyValue(nullptr, from) {}
  inline KeyValue(KeyValue&& from) noexcept
      : KeyValue(nullptr, std::move(from)) {}
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  enum KeyCase {
    kIntKey = 1,
    kLongKey = 2,
    kDoubleKey = 3,
    kStringKey = 4,
    kCharKey = 5,
    KEY_NOT_SET = 0,
  };
  enum ValueCase {
    kIntValue = 6,
    kLongValue = 7,
    kDoubleValue = 8,
    kStringValue = 9,
    kCharValue = 10,
    VALUE_NOT_SET = 0,
  };
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
        &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(KeyValue& a, KeyValue& b) { a.Swap(&b); }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<KeyValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KeyValue& from) { KeyValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(KeyValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "KeyValue"; }

 protected:
  explicit KeyValue(::google::protobuf::Arena* arena);
  KeyValue(::google::protobuf::Arena* arena, const KeyValue& from);
  KeyValue(::google::protobuf::Arena* arena, KeyValue&& from) noexcept
      : KeyValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using KeyValueType = KeyValue_KeyValueType;
  static constexpr KeyValueType INT = KeyValue_KeyValueType_INT;
  static constexpr KeyValueType LONG = KeyValue_KeyValueType_LONG;
  static constexpr KeyValueType DOUBLE = KeyValue_KeyValueType_DOUBLE;
  static constexpr KeyValueType CHAR = KeyValue_KeyValueType_CHAR;
  static constexpr KeyValueType STRING = KeyValue_KeyValueType_STRING;
  static inline bool KeyValueType_IsValid(int value) {
    return KeyValue_KeyValueType_IsValid(value);
  }
  static constexpr KeyValueType KeyValueType_MIN = KeyValue_KeyValueType_KeyValueType_MIN;
  static constexpr KeyValueType KeyValueType_MAX = KeyValue_KeyValueType_KeyValueType_MAX;
  static constexpr int KeyValueType_ARRAYSIZE = KeyValue_KeyValueType_KeyValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* KeyValueType_descriptor() {
    return KeyValue_KeyValueType_descriptor();
  }
  template <typename T>
  static inline const std::string& KeyValueType_Name(T value) {
    return KeyValue_KeyValueType_Name(value);
  }
  static inline bool KeyValueType_Parse(absl::string_view name, KeyValueType* value) {
    return KeyValue_KeyValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kKeyTypeFieldNumber = 11,
    kValueTypeFieldNumber = 12,
    kIntKeyFieldNumber = 1,
    kLongKeyFieldNumber = 2,
    kDoubleKeyFieldNumber = 3,
    kStringKeyFieldNumber = 4,
    kCharKeyFieldNumber = 5,
    kIntValueFieldNumber = 6,
    kLongValueFieldNumber = 7,
    kDoubleValueFieldNumber = 8,
    kStringValueFieldNumber = 9,
    kCharValueFieldNumber = 10,
  };
  // .KeyValue.KeyValueType key_type = 11;
  void clear_key_type() ;
  ::KeyValue_KeyValueType key_type() const;
  void set_key_type(::KeyValue_KeyValueType value);

  private:
  ::KeyValue_KeyValueType _internal_key_type() const;
  void _internal_set_key_type(::KeyValue_KeyValueType value);

  public:
  // .KeyValue.KeyValueType value_type = 12;
  void clear_value_type() ;
  ::KeyValue_KeyValueType value_type() const;
  void set_value_type(::KeyValue_KeyValueType value);

  private:
  ::KeyValue_KeyValueType _internal_value_type() const;
  void _internal_set_value_type(::KeyValue_KeyValueType value);

  public:
  // int32 int_key = 1;
  bool has_int_key() const;
  void clear_int_key() ;
  ::int32_t int_key() const;
  void set_int_key(::int32_t value);

  private:
  ::int32_t _internal_int_key() const;
  void _internal_set_int_key(::int32_t value);

  public:
  // int64 long_key = 2;
  bool has_long_key() const;
  void clear_long_key() ;
  ::int64_t long_key() const;
  void set_long_key(::int64_t value);

  private:
  ::int64_t _internal_long_key() const;
  void _internal_set_long_key(::int64_t value);

  public:
  // double double_key = 3;
  bool has_double_key() const;
  void clear_double_key() ;
  double double_key() const;
  void set_double_key(double value);

  private:
  double _internal_double_key() const;
  void _internal_set_double_key(double value);

  public:
  // string string_key = 4;
  bool has_string_key() const;
  void clear_string_key() ;
  const std::string& string_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_key(Arg_&& arg, Args_... args);
  std::string* mutable_string_key();
  PROTOBUF_NODISCARD std::string* release_string_key();
  void set_allocated_string_key(std::string* value);

  private:
  const std::string& _internal_string_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_key(
      const std::string& value);
  std::string* _internal_mutable_string_key();

  public:
  // string char_key = 5;
  bool has_char_key() const;
  void clear_char_key() ;
  const std::string& char_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_char_key(Arg_&& arg, Args_... args);
  std::string* mutable_char_key();
  PROTOBUF_NODISCARD std::string* release_char_key();
  void set_allocated_char_key(std::string* value);

  private:
  const std::string& _internal_char_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_char_key(
      const std::string& value);
  std::string* _internal_mutable_char_key();

  public:
  // int32 int_value = 6;
  bool has_int_value() const;
  void clear_int_value() ;
  ::int32_t int_value() const;
  void set_int_value(::int32_t value);

  private:
  ::int32_t _internal_int_value() const;
  void _internal_set_int_value(::int32_t value);

  public:
  // int64 long_value = 7;
  bool has_long_value() const;
  void clear_long_value() ;
  ::int64_t long_value() const;
  void set_long_value(::int64_t value);

  private:
  ::int64_t _internal_long_value() const;
  void _internal_set_long_value(::int64_t value);

  public:
  // double double_value = 8;
  bool has_double_value() const;
  void clear_double_value() ;
  double double_value() const;
  void set_double_value(double value);

  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);

  public:
  // string string_value = 9;
  bool has_string_value() const;
  void clear_string_value() ;
  const std::string& string_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string_value(Arg_&& arg, Args_... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* value);

  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(
      const std::string& value);
  std::string* _internal_mutable_string_value();

  public:
  // string char_value = 10;
  bool has_char_value() const;
  void clear_char_value() ;
  const std::string& char_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_char_value(Arg_&& arg, Args_... args);
  std::string* mutable_char_value();
  PROTOBUF_NODISCARD std::string* release_char_value();
  void set_allocated_char_value(std::string* value);

  private:
  const std::string& _internal_char_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_char_value(
      const std::string& value);
  std::string* _internal_mutable_char_value();

  public:
  void clear_key();
  KeyCase key_case() const;
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:KeyValue)
 private:
  class _Internal;
  void set_has_int_key();
  void set_has_long_key();
  void set_has_double_key();
  void set_has_string_key();
  void set_has_char_key();
  void set_has_int_value();
  void set_has_long_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_char_value();
  inline bool has_key() const;
  inline void clear_has_key();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 12, 0,
      65, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_KeyValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeyValue& from_msg);
    int key_type_;
    int value_type_;
    union KeyUnion {
      constexpr KeyUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t int_key_;
      ::int64_t long_key_;
      double double_key_;
      ::google::protobuf::internal::ArenaStringPtr string_key_;
      ::google::protobuf::internal::ArenaStringPtr char_key_;
    } key_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t int_value_;
      ::int64_t long_value_;
      double double_value_;
      ::google::protobuf::internal::ArenaStringPtr string_value_;
      ::google::protobuf::internal::ArenaStringPtr char_value_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_KeyValue_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// KeyValue

// int32 int_key = 1;
inline bool KeyValue::has_int_key() const {
  return key_case() == kIntKey;
}
inline void KeyValue::set_has_int_key() {
  _impl_._oneof_case_[0] = kIntKey;
}
inline void KeyValue::clear_int_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() == kIntKey) {
    _impl_.key_.int_key_ = 0;
    clear_has_key();
  }
}
inline ::int32_t KeyValue::int_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.int_key)
  return _internal_int_key();
}
inline void KeyValue::set_int_key(::int32_t value) {
  if (key_case() != kIntKey) {
    clear_key();
    set_has_int_key();
  }
  _impl_.key_.int_key_ = value;
  // @@protoc_insertion_point(field_set:KeyValue.int_key)
}
inline ::int32_t KeyValue::_internal_int_key() const {
  if (key_case() == kIntKey) {
    return _impl_.key_.int_key_;
  }
  return 0;
}

// int64 long_key = 2;
inline bool KeyValue::has_long_key() const {
  return key_case() == kLongKey;
}
inline void KeyValue::set_has_long_key() {
  _impl_._oneof_case_[0] = kLongKey;
}
inline void KeyValue::clear_long_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() == kLongKey) {
    _impl_.key_.long_key_ = ::int64_t{0};
    clear_has_key();
  }
}
inline ::int64_t KeyValue::long_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.long_key)
  return _internal_long_key();
}
inline void KeyValue::set_long_key(::int64_t value) {
  if (key_case() != kLongKey) {
    clear_key();
    set_has_long_key();
  }
  _impl_.key_.long_key_ = value;
  // @@protoc_insertion_point(field_set:KeyValue.long_key)
}
inline ::int64_t KeyValue::_internal_long_key() const {
  if (key_case() == kLongKey) {
    return _impl_.key_.long_key_;
  }
  return ::int64_t{0};
}

// double double_key = 3;
inline bool KeyValue::has_double_key() const {
  return key_case() == kDoubleKey;
}
inline void KeyValue::set_has_double_key() {
  _impl_._oneof_case_[0] = kDoubleKey;
}
inline void KeyValue::clear_double_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() == kDoubleKey) {
    _impl_.key_.double_key_ = 0;
    clear_has_key();
  }
}
inline double KeyValue::double_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.double_key)
  return _internal_double_key();
}
inline void KeyValue::set_double_key(double value) {
  if (key_case() != kDoubleKey) {
    clear_key();
    set_has_double_key();
  }
  _impl_.key_.double_key_ = value;
  // @@protoc_insertion_point(field_set:KeyValue.double_key)
}
inline double KeyValue::_internal_double_key() const {
  if (key_case() == kDoubleKey) {
    return _impl_.key_.double_key_;
  }
  return 0;
}

// string string_key = 4;
inline bool KeyValue::has_string_key() const {
  return key_case() == kStringKey;
}
inline void KeyValue::set_has_string_key() {
  _impl_._oneof_case_[0] = kStringKey;
}
inline void KeyValue::clear_string_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() == kStringKey) {
    _impl_.key_.string_key_.Destroy();
    clear_has_key();
  }
}
inline const std::string& KeyValue::string_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:KeyValue.string_key)
  return _internal_string_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_string_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() != kStringKey) {
    clear_key();

    set_has_string_key();
    _impl_.key_.string_key_.InitDefault();
  }
  _impl_.key_.string_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:KeyValue.string_key)
}
inline std::string* KeyValue::mutable_string_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_key();
  // @@protoc_insertion_point(field_mutable:KeyValue.string_key)
  return _s;
}
inline const std::string& KeyValue::_internal_string_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (key_case() != kStringKey) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.key_.string_key_.Get();
}
inline void KeyValue::_internal_set_string_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() != kStringKey) {
    clear_key();

    set_has_string_key();
    _impl_.key_.string_key_.InitDefault();
  }
  _impl_.key_.string_key_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_string_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() != kStringKey) {
    clear_key();

    set_has_string_key();
    _impl_.key_.string_key_.InitDefault();
  }
  return _impl_.key_.string_key_.Mutable( GetArena());
}
inline std::string* KeyValue::release_string_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:KeyValue.string_key)
  if (key_case() != kStringKey) {
    return nullptr;
  }
  clear_has_key();
  return _impl_.key_.string_key_.Release();
}
inline void KeyValue::set_allocated_string_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_key()) {
    clear_key();
  }
  if (value != nullptr) {
    set_has_string_key();
    _impl_.key_.string_key_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.string_key)
}

// string char_key = 5;
inline bool KeyValue::has_char_key() const {
  return key_case() == kCharKey;
}
inline void KeyValue::set_has_char_key() {
  _impl_._oneof_case_[0] = kCharKey;
}
inline void KeyValue::clear_char_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() == kCharKey) {
    _impl_.key_.char_key_.Destroy();
    clear_has_key();
  }
}
inline const std::string& KeyValue::char_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:KeyValue.char_key)
  return _internal_char_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_char_key(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() != kCharKey) {
    clear_key();

    set_has_char_key();
    _impl_.key_.char_key_.InitDefault();
  }
  _impl_.key_.char_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:KeyValue.char_key)
}
inline std::string* KeyValue::mutable_char_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_char_key();
  // @@protoc_insertion_point(field_mutable:KeyValue.char_key)
  return _s;
}
inline const std::string& KeyValue::_internal_char_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (key_case() != kCharKey) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.key_.char_key_.Get();
}
inline void KeyValue::_internal_set_char_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() != kCharKey) {
    clear_key();

    set_has_char_key();
    _impl_.key_.char_key_.InitDefault();
  }
  _impl_.key_.char_key_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_char_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (key_case() != kCharKey) {
    clear_key();

    set_has_char_key();
    _impl_.key_.char_key_.InitDefault();
  }
  return _impl_.key_.char_key_.Mutable( GetArena());
}
inline std::string* KeyValue::release_char_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:KeyValue.char_key)
  if (key_case() != kCharKey) {
    return nullptr;
  }
  clear_has_key();
  return _impl_.key_.char_key_.Release();
}
inline void KeyValue::set_allocated_char_key(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_key()) {
    clear_key();
  }
  if (value != nullptr) {
    set_has_char_key();
    _impl_.key_.char_key_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.char_key)
}

// int32 int_value = 6;
inline bool KeyValue::has_int_value() const {
  return value_case() == kIntValue;
}
inline void KeyValue::set_has_int_value() {
  _impl_._oneof_case_[1] = kIntValue;
}
inline void KeyValue::clear_int_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntValue) {
    _impl_.value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::int32_t KeyValue::int_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.int_value)
  return _internal_int_value();
}
inline void KeyValue::set_int_value(::int32_t value) {
  if (value_case() != kIntValue) {
    clear_value();
    set_has_int_value();
  }
  _impl_.value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:KeyValue.int_value)
}
inline ::int32_t KeyValue::_internal_int_value() const {
  if (value_case() == kIntValue) {
    return _impl_.value_.int_value_;
  }
  return 0;
}

// int64 long_value = 7;
inline bool KeyValue::has_long_value() const {
  return value_case() == kLongValue;
}
inline void KeyValue::set_has_long_value() {
  _impl_._oneof_case_[1] = kLongValue;
}
inline void KeyValue::clear_long_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kLongValue) {
    _impl_.value_.long_value_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t KeyValue::long_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.long_value)
  return _internal_long_value();
}
inline void KeyValue::set_long_value(::int64_t value) {
  if (value_case() != kLongValue) {
    clear_value();
    set_has_long_value();
  }
  _impl_.value_.long_value_ = value;
  // @@protoc_insertion_point(field_set:KeyValue.long_value)
}
inline ::int64_t KeyValue::_internal_long_value() const {
  if (value_case() == kLongValue) {
    return _impl_.value_.long_value_;
  }
  return ::int64_t{0};
}

// double double_value = 8;
inline bool KeyValue::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void KeyValue::set_has_double_value() {
  _impl_._oneof_case_[1] = kDoubleValue;
}
inline void KeyValue::clear_double_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kDoubleValue) {
    _impl_.value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double KeyValue::double_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.double_value)
  return _internal_double_value();
}
inline void KeyValue::set_double_value(double value) {
  if (value_case() != kDoubleValue) {
    clear_value();
    set_has_double_value();
  }
  _impl_.value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:KeyValue.double_value)
}
inline double KeyValue::_internal_double_value() const {
  if (value_case() == kDoubleValue) {
    return _impl_.value_.double_value_;
  }
  return 0;
}

// string string_value = 9;
inline bool KeyValue::has_string_value() const {
  return value_case() == kStringValue;
}
inline void KeyValue::set_has_string_value() {
  _impl_._oneof_case_[1] = kStringValue;
}
inline void KeyValue::clear_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringValue) {
    _impl_.value_.string_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& KeyValue::string_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:KeyValue.string_value)
  return _internal_string_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_string_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:KeyValue.string_value)
}
inline std::string* KeyValue::mutable_string_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:KeyValue.string_value)
  return _s;
}
inline const std::string& KeyValue::_internal_string_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.string_value_.Get();
}
inline void KeyValue::_internal_set_string_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  _impl_.value_.string_value_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringValue) {
    clear_value();

    set_has_string_value();
    _impl_.value_.string_value_.InitDefault();
  }
  return _impl_.value_.string_value_.Mutable( GetArena());
}
inline std::string* KeyValue::release_string_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:KeyValue.string_value)
  if (value_case() != kStringValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.string_value_.Release();
}
inline void KeyValue::set_allocated_string_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_string_value();
    _impl_.value_.string_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.string_value)
}

// string char_value = 10;
inline bool KeyValue::has_char_value() const {
  return value_case() == kCharValue;
}
inline void KeyValue::set_has_char_value() {
  _impl_._oneof_case_[1] = kCharValue;
}
inline void KeyValue::clear_char_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kCharValue) {
    _impl_.value_.char_value_.Destroy();
    clear_has_value();
  }
}
inline const std::string& KeyValue::char_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:KeyValue.char_value)
  return _internal_char_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void KeyValue::set_char_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kCharValue) {
    clear_value();

    set_has_char_value();
    _impl_.value_.char_value_.InitDefault();
  }
  _impl_.value_.char_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:KeyValue.char_value)
}
inline std::string* KeyValue::mutable_char_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_char_value();
  // @@protoc_insertion_point(field_mutable:KeyValue.char_value)
  return _s;
}
inline const std::string& KeyValue::_internal_char_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kCharValue) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.char_value_.Get();
}
inline void KeyValue::_internal_set_char_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kCharValue) {
    clear_value();

    set_has_char_value();
    _impl_.value_.char_value_.InitDefault();
  }
  _impl_.value_.char_value_.Set(value, GetArena());
}
inline std::string* KeyValue::_internal_mutable_char_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kCharValue) {
    clear_value();

    set_has_char_value();
    _impl_.value_.char_value_.InitDefault();
  }
  return _impl_.value_.char_value_.Mutable( GetArena());
}
inline std::string* KeyValue::release_char_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:KeyValue.char_value)
  if (value_case() != kCharValue) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.char_value_.Release();
}
inline void KeyValue::set_allocated_char_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_char_value();
    _impl_.value_.char_value_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.char_value)
}

// .KeyValue.KeyValueType key_type = 11;
inline void KeyValue::clear_key_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_type_ = 0;
}
inline ::KeyValue_KeyValueType KeyValue::key_type() const {
  // @@protoc_insertion_point(field_get:KeyValue.key_type)
  return _internal_key_type();
}
inline void KeyValue::set_key_type(::KeyValue_KeyValueType value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:KeyValue.key_type)
}
inline ::KeyValue_KeyValueType KeyValue::_internal_key_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::KeyValue_KeyValueType>(_impl_.key_type_);
}
inline void KeyValue::_internal_set_key_type(::KeyValue_KeyValueType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_type_ = value;
}

// .KeyValue.KeyValueType value_type = 12;
inline void KeyValue::clear_value_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_type_ = 0;
}
inline ::KeyValue_KeyValueType KeyValue::value_type() const {
  // @@protoc_insertion_point(field_get:KeyValue.value_type)
  return _internal_value_type();
}
inline void KeyValue::set_value_type(::KeyValue_KeyValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:KeyValue.value_type)
}
inline ::KeyValue_KeyValueType KeyValue::_internal_value_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::KeyValue_KeyValueType>(_impl_.value_type_);
}
inline void KeyValue::_internal_set_value_type(::KeyValue_KeyValueType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_type_ = value;
}

inline bool KeyValue::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void KeyValue::clear_has_key() {
  _impl_._oneof_case_[0] = KEY_NOT_SET;
}
inline bool KeyValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void KeyValue::clear_has_value() {
  _impl_._oneof_case_[1] = VALUE_NOT_SET;
}
inline KeyValue::KeyCase KeyValue::key_case() const {
  return KeyValue::KeyCase(_impl_._oneof_case_[0]);
}
inline KeyValue::ValueCase KeyValue::value_case() const {
  return KeyValue::ValueCase(_impl_._oneof_case_[1]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::KeyValue_KeyValueType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::KeyValue_KeyValueType>() {
  return ::KeyValue_KeyValueType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_KeyValue_2eproto_2epb_2eh
