// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: KeyValue.proto
// Protobuf C++ Version: 5.28.2

#include "KeyValue.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr KeyValue::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_type_{static_cast< ::KeyValue_KeyValueType >(0)},
        value_type_{static_cast< ::KeyValue_KeyValueType >(0)},
        key_{},
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR KeyValue::KeyValue(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KeyValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueDefaultTypeInternal() {}
  union {
    KeyValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueDefaultTypeInternal _KeyValue_default_instance_;
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_KeyValue_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_KeyValue_2eproto = nullptr;
const ::uint32_t
    TableStruct_KeyValue_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::KeyValue, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::KeyValue, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::KeyValue, _impl_.key_type_),
        PROTOBUF_FIELD_OFFSET(::KeyValue, _impl_.value_type_),
        PROTOBUF_FIELD_OFFSET(::KeyValue, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::KeyValue, _impl_.value_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::KeyValue)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_KeyValue_default_instance_._instance,
};
const char descriptor_table_protodef_KeyValue_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016KeyValue.proto\"\215\003\n\010KeyValue\022\021\n\007int_key"
    "\030\001 \001(\005H\000\022\022\n\010long_key\030\002 \001(\003H\000\022\024\n\ndouble_k"
    "ey\030\003 \001(\001H\000\022\024\n\nstring_key\030\004 \001(\tH\000\022\022\n\010char"
    "_key\030\005 \001(\tH\000\022\023\n\tint_value\030\006 \001(\005H\001\022\024\n\nlon"
    "g_value\030\007 \001(\003H\001\022\026\n\014double_value\030\010 \001(\001H\001\022"
    "\026\n\014string_value\030\t \001(\tH\001\022\024\n\nchar_value\030\n "
    "\001(\tH\001\022(\n\010key_type\030\013 \001(\0162\026.KeyValue.KeyVa"
    "lueType\022*\n\nvalue_type\030\014 \001(\0162\026.KeyValue.K"
    "eyValueType\"C\n\014KeyValueType\022\007\n\003INT\020\000\022\010\n\004"
    "LONG\020\001\022\n\n\006DOUBLE\020\002\022\010\n\004CHAR\020\003\022\n\n\006STRING\020\004"
    "B\005\n\003keyB\007\n\005valueb\006proto3"
};
static ::absl::once_flag descriptor_table_KeyValue_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_KeyValue_2eproto = {
    false,
    false,
    424,
    descriptor_table_protodef_KeyValue_2eproto,
    "KeyValue.proto",
    &descriptor_table_KeyValue_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_KeyValue_2eproto::offsets,
    file_level_enum_descriptors_KeyValue_2eproto,
    file_level_service_descriptors_KeyValue_2eproto,
};
const ::google::protobuf::EnumDescriptor* KeyValue_KeyValueType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_KeyValue_2eproto);
  return file_level_enum_descriptors_KeyValue_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t KeyValue_KeyValueType_internal_data_[] = {
    327680u, 0u, };
bool KeyValue_KeyValueType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr KeyValue_KeyValueType KeyValue::INT;
constexpr KeyValue_KeyValueType KeyValue::LONG;
constexpr KeyValue_KeyValueType KeyValue::DOUBLE;
constexpr KeyValue_KeyValueType KeyValue::CHAR;
constexpr KeyValue_KeyValueType KeyValue::STRING;
constexpr KeyValue_KeyValueType KeyValue::KeyValueType_MIN;
constexpr KeyValue_KeyValueType KeyValue::KeyValueType_MAX;
constexpr int KeyValue::KeyValueType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class KeyValue::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::KeyValue, _impl_._oneof_case_);
};

KeyValue::KeyValue(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:KeyValue)
}
inline PROTOBUF_NDEBUG_INLINE KeyValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::KeyValue& from_msg)
      : key_{},
        value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0], from._oneof_case_[1]} {}

KeyValue::KeyValue(
    ::google::protobuf::Arena* arena,
    const KeyValue& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  KeyValue* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, key_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, key_type_),
           offsetof(Impl_, value_type_) -
               offsetof(Impl_, key_type_) +
               sizeof(Impl_::value_type_));
  switch (key_case()) {
    case KEY_NOT_SET:
      break;
      case kIntKey:
        _impl_.key_.int_key_ = from._impl_.key_.int_key_;
        break;
      case kLongKey:
        _impl_.key_.long_key_ = from._impl_.key_.long_key_;
        break;
      case kDoubleKey:
        _impl_.key_.double_key_ = from._impl_.key_.double_key_;
        break;
      case kStringKey:
        new (&_impl_.key_.string_key_) decltype(_impl_.key_.string_key_){arena, from._impl_.key_.string_key_};
        break;
      case kCharKey:
        new (&_impl_.key_.char_key_) decltype(_impl_.key_.char_key_){arena, from._impl_.key_.char_key_};
        break;
  }
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kIntValue:
        _impl_.value_.int_value_ = from._impl_.value_.int_value_;
        break;
      case kLongValue:
        _impl_.value_.long_value_ = from._impl_.value_.long_value_;
        break;
      case kDoubleValue:
        _impl_.value_.double_value_ = from._impl_.value_.double_value_;
        break;
      case kStringValue:
        new (&_impl_.value_.string_value_) decltype(_impl_.value_.string_value_){arena, from._impl_.value_.string_value_};
        break;
      case kCharValue:
        new (&_impl_.value_.char_value_) decltype(_impl_.value_.char_value_){arena, from._impl_.value_.char_value_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:KeyValue)
}
inline PROTOBUF_NDEBUG_INLINE KeyValue::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_{},
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void KeyValue::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, key_type_),
           0,
           offsetof(Impl_, value_type_) -
               offsetof(Impl_, key_type_) +
               sizeof(Impl_::value_type_));
}
KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:KeyValue)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void KeyValue::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_key()) {
    clear_key();
  }
  if (has_value()) {
    clear_value();
  }
  _impl_.~Impl_();
}

void KeyValue::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:KeyValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (key_case()) {
    case kIntKey: {
      // No need to clear
      break;
    }
    case kLongKey: {
      // No need to clear
      break;
    }
    case kDoubleKey: {
      // No need to clear
      break;
    }
    case kStringKey: {
      _impl_.key_.string_key_.Destroy();
      break;
    }
    case kCharKey: {
      _impl_.key_.char_key_.Destroy();
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KEY_NOT_SET;
}

void KeyValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:KeyValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (value_case()) {
    case kIntValue: {
      // No need to clear
      break;
    }
    case kLongValue: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.value_.string_value_.Destroy();
      break;
    }
    case kCharValue: {
      _impl_.value_.char_value_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = VALUE_NOT_SET;
}


PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::MessageLite::ClassDataFull
    KeyValue::_class_data_ = {
        ::google::protobuf::Message::ClassData{
            &_KeyValue_default_instance_._instance,
            &_table_.header,
            nullptr,  // OnDemandRegisterArenaDtor
            nullptr,  // IsInitialized
            &KeyValue::MergeImpl,
#if defined(PROTOBUF_CUSTOM_VTABLE)
            ::google::protobuf::Message::GetDeleteImpl<KeyValue>(),
            ::google::protobuf::Message::GetNewImpl<KeyValue>(),
            ::google::protobuf::Message::GetClearImpl<KeyValue>(), &KeyValue::ByteSizeLong,
                &KeyValue::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
            PROTOBUF_FIELD_OFFSET(KeyValue, _impl_._cached_size_),
            false,
        },
        &KeyValue::kDescriptorMethods,
        &descriptor_table_KeyValue_2eproto,
        nullptr,  // tracker
};
const ::google::protobuf::MessageLite::ClassData* KeyValue::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 12, 0, 65, 2> KeyValue::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    12, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::KeyValue>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .KeyValue.KeyValueType value_type = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KeyValue, _impl_.value_type_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_type_)}},
    // .KeyValue.KeyValueType key_type = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KeyValue, _impl_.key_type_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 int_key = 1;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_.int_key_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
    // int64 long_key = 2;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_.long_key_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double double_key = 3;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_.double_key_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // string string_key = 4;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_.string_key_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string char_key = 5;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_.char_key_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 int_value = 6;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_.int_value_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt32)},
    // int64 long_value = 7;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_.long_value_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // double double_value = 8;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_.double_value_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kDouble)},
    // string string_value = 9;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_.string_value_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string char_value = 10;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_.char_value_), _Internal::kOneofCaseOffset + 4, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .KeyValue.KeyValueType key_type = 11;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .KeyValue.KeyValueType value_type = 12;
    {PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\10\0\0\0\12\10\0\0\0\14\12\0\0\0\0\0"
    "KeyValue"
    "string_key"
    "char_key"
    "string_value"
    "char_value"
  }},
};

PROTOBUF_NOINLINE void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyValue)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.key_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_type_) -
      reinterpret_cast<char*>(&_impl_.key_type_)) + sizeof(_impl_.value_type_));
  clear_key();
  clear_value();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KeyValue::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KeyValue& this_ = static_cast<const KeyValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KeyValue::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KeyValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:KeyValue)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.key_case()) {
            case kIntKey: {
              target = ::google::protobuf::internal::WireFormatLite::
                  WriteInt32ToArrayWithField<1>(
                      stream, this_._internal_int_key(), target);
              break;
            }
            case kLongKey: {
              target = ::google::protobuf::internal::WireFormatLite::
                  WriteInt64ToArrayWithField<2>(
                      stream, this_._internal_long_key(), target);
              break;
            }
            case kDoubleKey: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                  3, this_._internal_double_key(), target);
              break;
            }
            case kStringKey: {
              const std::string& _s = this_._internal_string_key();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KeyValue.string_key");
              target = stream->WriteStringMaybeAliased(4, _s, target);
              break;
            }
            case kCharKey: {
              const std::string& _s = this_._internal_char_key();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KeyValue.char_key");
              target = stream->WriteStringMaybeAliased(5, _s, target);
              break;
            }
            default:
              break;
          }
          switch (this_.value_case()) {
            case kIntValue: {
              target = ::google::protobuf::internal::WireFormatLite::
                  WriteInt32ToArrayWithField<6>(
                      stream, this_._internal_int_value(), target);
              break;
            }
            case kLongValue: {
              target = ::google::protobuf::internal::WireFormatLite::
                  WriteInt64ToArrayWithField<7>(
                      stream, this_._internal_long_value(), target);
              break;
            }
            case kDoubleValue: {
              target = stream->EnsureSpace(target);
              target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                  8, this_._internal_double_value(), target);
              break;
            }
            case kStringValue: {
              const std::string& _s = this_._internal_string_value();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KeyValue.string_value");
              target = stream->WriteStringMaybeAliased(9, _s, target);
              break;
            }
            case kCharValue: {
              const std::string& _s = this_._internal_char_value();
              ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                  _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "KeyValue.char_value");
              target = stream->WriteStringMaybeAliased(10, _s, target);
              break;
            }
            default:
              break;
          }
          // .KeyValue.KeyValueType key_type = 11;
          if (this_._internal_key_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this_._internal_key_type(), target);
          }

          // .KeyValue.KeyValueType value_type = 12;
          if (this_._internal_value_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                12, this_._internal_value_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:KeyValue)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KeyValue::ByteSizeLong(const MessageLite& base) {
          const KeyValue& this_ = static_cast<const KeyValue&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KeyValue::ByteSizeLong() const {
          const KeyValue& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:KeyValue)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .KeyValue.KeyValueType key_type = 11;
            if (this_._internal_key_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_key_type());
            }
            // .KeyValue.KeyValueType value_type = 12;
            if (this_._internal_value_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_value_type());
            }
          }
          switch (this_.key_case()) {
            // int32 int_key = 1;
            case kIntKey: {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_int_key());
              break;
            }
            // int64 long_key = 2;
            case kLongKey: {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_long_key());
              break;
            }
            // double double_key = 3;
            case kDoubleKey: {
              total_size += 9;
              break;
            }
            // string string_key = 4;
            case kStringKey: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_string_key());
              break;
            }
            // string char_key = 5;
            case kCharKey: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_char_key());
              break;
            }
            case KEY_NOT_SET: {
              break;
            }
          }
          switch (this_.value_case()) {
            // int32 int_value = 6;
            case kIntValue: {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_int_value());
              break;
            }
            // int64 long_value = 7;
            case kLongValue: {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_long_value());
              break;
            }
            // double double_value = 8;
            case kDoubleValue: {
              total_size += 9;
              break;
            }
            // string string_value = 9;
            case kStringValue: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_string_value());
              break;
            }
            // string char_value = 10;
            case kCharValue: {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_char_value());
              break;
            }
            case VALUE_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KeyValue::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KeyValue*>(&to_msg);
  auto& from = static_cast<const KeyValue&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:KeyValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_key_type() != 0) {
    _this->_impl_.key_type_ = from._impl_.key_type_;
  }
  if (from._internal_value_type() != 0) {
    _this->_impl_.value_type_ = from._impl_.value_type_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_key();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kIntKey: {
        _this->_impl_.key_.int_key_ = from._impl_.key_.int_key_;
        break;
      }
      case kLongKey: {
        _this->_impl_.key_.long_key_ = from._impl_.key_.long_key_;
        break;
      }
      case kDoubleKey: {
        _this->_impl_.key_.double_key_ = from._impl_.key_.double_key_;
        break;
      }
      case kStringKey: {
        if (oneof_needs_init) {
          _this->_impl_.key_.string_key_.InitDefault();
        }
        _this->_impl_.key_.string_key_.Set(from._internal_string_key(), arena);
        break;
      }
      case kCharKey: {
        if (oneof_needs_init) {
          _this->_impl_.key_.char_key_.InitDefault();
        }
        _this->_impl_.key_.char_key_.Set(from._internal_char_key(), arena);
        break;
      }
      case KEY_NOT_SET:
        break;
    }
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[1]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[1];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_value();
      }
      _this->_impl_._oneof_case_[1] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kIntValue: {
        _this->_impl_.value_.int_value_ = from._impl_.value_.int_value_;
        break;
      }
      case kLongValue: {
        _this->_impl_.value_.long_value_ = from._impl_.value_.long_value_;
        break;
      }
      case kDoubleValue: {
        _this->_impl_.value_.double_value_ = from._impl_.value_.double_value_;
        break;
      }
      case kStringValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.string_value_.InitDefault();
        }
        _this->_impl_.value_.string_value_.Set(from._internal_string_value(), arena);
        break;
      }
      case kCharValue: {
        if (oneof_needs_init) {
          _this->_impl_.value_.char_value_.InitDefault();
        }
        _this->_impl_.value_.char_value_.Set(from._internal_char_value(), arena);
        break;
      }
      case VALUE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KeyValue::InternalSwap(KeyValue* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.value_type_)
      + sizeof(KeyValue::_impl_.value_type_)
      - PROTOBUF_FIELD_OFFSET(KeyValue, _impl_.key_type_)>(
          reinterpret_cast<char*>(&_impl_.key_type_),
          reinterpret_cast<char*>(&other->_impl_.key_type_));
  swap(_impl_.key_, other->_impl_.key_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_KeyValue_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
